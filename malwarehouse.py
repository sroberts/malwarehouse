#!/usr/bin/env python
# encoding: utf-8
"""
malwarehouse.py

Created by Scott Roberts.
Copyright (c) 2012 TogaFoamParty Studios. All rights reserved.
"""

import datetime
import os
import pwd
import shutil
import re
import magic
import pydeep
import utils
import db_helper
import sys
from malware_sample import MalwareSample
from argparse import ArgumentParser



# Malwarehouse Options
config = utils.get_configuration("malwarehouse.cfg")
# Initialize our DB controller
db_controller = db_helper.MalwareDbController(config)

if config.get('analysis', 'yara') == 'On':
    import yara
    option_yara_rulefile = config.get('settings', 'yararules')
if config.get('analysis', 'magic') == 'On':
    import magic
if config.get('analysis', 'ssdeep') == 'On':
    import pydeep
   
def check_prelim():
    """Initial setup code. Eventually this will set options."""
    return db_controller.initialize_db()

def create_db():
    pass



def read_sample_db():
    pass

def read_sample_filesystem():
    pass

def update_sample_db():
    pass

def update_sample_filesystem():
    pass

def delete_sample_db():
    pass

def delete_sample_filesystem():
    pass

# Processes the malware sample
def malware_loader(malware_path, source, notes, tags):
    sample = MalwareSample(malware_path, config, source, notes, tags)
    return sample


'''
# Setup Logging
import logging
logger = logging.getLogger('default')
logger.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
# Setup logging to file
fh = logging.FileHandler('default.log')
fh.setLevel(logging.DEBUG)
logger.addHandler(fh)
# Setup logging to console
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
logger.addHandler(ch)
# Setup logging to syslog
import logging.handlers
sh = logging.handlers.SysLogHandler()
sh.setLevel(logging.DEBUG)
logger.addHandler(sh)

# 'application' code
logger.debug('debug message')
logger.info('info message')
logger.warn('warn message')
logger.error('error message')
logger.critical('critical message')
'''

'''
# Setup Text Colors
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'

    def disable(self):
        self.HEADER = ''
        self.OKBLUE = ''
        self.OKGREEN = ''
        self.WARNING = ''
        self.FAIL = ''
        self.ENDC = ''

print bcolors.OKBLUE + "Test Message" + bcolors.ENDC
'''

def foo():
    return "foo function called"

def bar():
    return "bar function called"

def main():
    check_prelim()

    parser = ArgumentParser()
  
    parser.add_argument("-r", "--recent",
                        action="store",
                        nargs='?',
                        default='5',
                        help="Display the newest samples (default: 5)") 
    
    parser.add_argument("-s", "--source",
                        action="store",
                        default=None,
                        help="Source of file")
    parser.add_argument("-t", "--tags",
                        action="store",
                        default=None,
                        help="Any characteristics of the malware")
    parser.add_argument("-n", "--notes",
                        action="store",
                        default="",
                        help="Notes about file")
    parser.add_argument("-f", "--find",
                        action="store",
                        default="",
                        help="Find a sample by name, md5, or sha256")
    parser.add_argument("-l", "--load",
                        action="store",
                        default="",
                        help="Load a malware sample for analysis")

    parser.add_argument("-d", "--delete",
                        action="store",
                        default="",
                        help="Delete a sample by name, md5, or sha256")

    args = parser.parse_args()
    cli_arguments = sys.argv
       
       
    # Set optional arguments
    tags   = args.tags   if args.tags   else ""
    source = args.source if args.source else ""
    notes  = args.notes if args.notes else ""
       
    # Process user commands
    if args.find:
        print "> Find called with %s." % (args.find)
        data = db_controller.find_sample(args.find)
        for result in data:
            try:
                print  MalwareSample.summary(utils.parse_sqlite_result(result))
            except Exception, err:
                print err

    elif "-r" in cli_arguments:
        if not args.recent:
            args.recent = 5
        print "> Recent called with %s" % (args.recent)
        data = db_controller.recent()
        print "\n%s Most Recent Samples:" % args.recent
        for result in data:
            try:
                print  MalwareSample.summary(utils.parse_sqlite_result(result))
            except Exception, err:
                print err
    elif args.delete:
        print "> [not implemented] Delete called with %s" % (args.delete)

    elif args.load:
        sample = malware_loader(args.load, source, notes, tags)
        sample.basic_analyzer()
        if sample.malware_definition:
            print "Analysis complete"
            print "Loading data to DB..."
            db_controller.load_db(sample.malware_definition)
            print "Creating report..."
            sample.create_report()
        else:
            print "Errors were encountered during analysis"
    return True
    
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "User aborted."
    except SystemExit:
        pass
    except:
        pass

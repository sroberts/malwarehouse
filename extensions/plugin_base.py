import utils, os
# Custom Exceptions
class PluginConfigError(Exception):
    pass
class MalwareHousePluginNotFound(Exception):
    def __init__(self, plugin_name):
        Exception.__init__(self, "Handler for plugin  [" + plugin_name + "] not found.")
        return None
 
def get_plugin(name, config=None):
    plugin = utils.first(x for x in PluginBase.plugins if x.get_name() == name)
    if plugin == None:
        print PluginBase.plugins
        print "Not found"
        return None
    return plugin(config)

class MalwareHousePlugin(type):
    def __init__(cls,name,bases,attrs):
        # add the plugin to the our plugins list
        if not hasattr(cls,'plugins'):
            cls.plugins = []
        else:
            cls.plugins.append(cls)

class PluginBase(object):
    __metaclass__ = MalwareHousePlugin 
    def __init__(self,config):        
        # Call the derived class to parse the rest of the configuration parameters
        self.initialize_config(config)
        
            
    def initialize_config(self,config_dict):
        raise NotImplementedError
    @staticmethod
    def get_name():
        raise NotImplementedError
    def analyze(self):
        pass
    def create_report(self, report_data, filename):
        try:
            with open(filename, 'w') as report_file:
                report_file.write(report_data)
                print "Report successfully created" 
                print "Report Location: %s" %filename
        except Exception, err:
            print "Error: %s" %err


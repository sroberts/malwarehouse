import os
import datetime
import utils
from extensions.plugin_base import PluginBase


class BasicAnalyzer(PluginBase):
        # Parsing Custom Options
    @staticmethod
    def get_name():
        return 'basic_analyzer'
    def initialize_config(self, config):
        # self.apikey = config.get(BasicAnalyzer.get_name(), "apikey")
        pass
    def analyze(self, malware_sample):
        malware_definition = dict()
        malware_definition["source"] = malware_sample.meta_source if malware_sample.meta_source else ""
        malware_definition["tags"] = malware_sample.meta_tags   if malware_sample.meta_tags   else ""
        malware_definition["notes"] = malware_sample.meta_notes  if malware_sample.meta_notes  else ""
        
        # Parsing Automatically Generated Options
        malware_definition["name"] = malware_sample.filename if malware_sample.filename else ""
        malware_definition["datetime"] = str(datetime.datetime.now())
        malware_definition["size"] = os.stat(malware_sample.analysis_sample_location).st_size
        malware_definition["md5"] = malware_sample.hash_md5
        malware_definition["sha256"] = malware_sample.hash_sha256
        malware_definition["mimetype"] = utils.get_mimetype(malware_sample.analysis_sample_location)  
        malware_definition["sample_dir"] = malware_sample.analysis_sample_directory  
        malware_sample.malware_definition = malware_definition
        self.report = malware_sample.details()
        self.report_name = "analysis.rpt"
        
    def create_report(self):
        print "Creating report"
        report_dir = self.analysis_report_directory
        try:
            if not os.path.exists(report_dir):
                os.makedirs(report_dir)
            super(BasicAnalyzer, self).create_report(self.report, os.path.join(report_dir, self.report_name))
        except Exception, err:
            print err

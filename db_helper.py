import sqlite3 
import os
import re



class MalwareDbController(object):
    def __init__(self, config):
        self.config = config
        self.db     = None
        
    def initialize_db(self):
        """ Initializes sqllite location and filename
            Returns [True, False] accordingly
        """  
        # Get DB configuration
        db_name = self.config.get('database', 'name')
        option_base_dir = os.path.expanduser(self.config.get('settings', 'basedir'))
        db_path = os.path.join(option_base_dir, db_name)
        dir_path = option_base_dir
    
        print "db_path = %s" % (db_path)
        print "dir_path = %s" % (dir_path)
        
        try:
            if not os.path.exists(dir_path):
                print "[ERROR] Base directory %s doesn't exist. Creating it..." % (dir_path)
                os.makedirs(dir_path)
            
            if not os.path.exists(db_path):
                print "[ERROR] Database %s doesn't exist. Creating it..." % (db_path)
            
            # Connect
            conn = sqlite3.connect(db_path)
            c = conn.cursor()            
            # Create table
            c.execute('''CREATE TABLE IF NOT EXISTS malwarehouse_index (datetime text, name text, mimetype text, tags text, size integer, md5 text, sha256 text, source text, notes text)''')
            # Save (commit) the changes
            conn.commit()
            # We can also close the cursor if we are done with it
            c.close()
            # Set our default db
            self.db = db_path
            return True
        except Exception, err:
            print "%s-%s"%(Exception, err)
            return False
    
    
    def find_sample(self,find_string):
        """ Searches the malware db for samples
            specified by the find_string query
        """

        conn = sqlite3.connect(self.db)
        c = conn.cursor()   
        if re.findall(r"^([a-fA-F\d]{64})$", find_string):
            sql = "SELECT * FROM malwarehouse_index WHERE sha256 = ?"
            
        elif re.findall(r"^([a-fA-F\d]{32})$", find_string):
            sql = "SELECT * FROM malwarehouse_index WHERE md5 = ?"
        else:
            sql = "SELECT * FROM malwarehouse_index WHERE name = ?"
        c.execute(sql, (find_string,))  
        data = c.fetchall()        
        return data
         
         
    def recent(self, quanity='5'):
        """Returns a summary of the last n (default: n = 5) pieces of malware."""
        conn = sqlite3.connect(self.db)
        c = conn.cursor()  
        try:
            float(quanity)
        except:
            raise ValueError
    
        c.execute("SELECT DISTINCT * FROM malwarehouse_index ORDER BY datetime DESC LIMIT %s;" % quanity)
        data = c.fetchall()
        return data
    
    def load_db(self, report_json):
        """Load information about the sample into the index DB.""" 
        try:   
            conn = sqlite3.connect(self.db)
            c = conn.cursor()
            # Insert a row of data
            c.execute("INSERT INTO malwarehouse_index VALUES (\"%s\", \"%s\", \"%s\", \"%s\", \"%d\", \"%s\", \"%s\", \"%s\", \"%s\")" % (report_json['datetime'], report_json['name'], report_json['mimetype'], report_json['tags'], report_json['size'], report_json['md5'], report_json['sha256'], report_json['source'], report_json['notes']))
            # Save (commit) the changes
            conn.commit()
            # We can also close the cursor if we are done with it
            c.close()
            print "Sample %s loaded..." % report_json['name']
            return True
        except Exception, err:
            print err


 